{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","console","log","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","getElementById"],"mappings":"8MAGMA,EAAe,CACnBC,OAAQ,CACNC,KAAM,sBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,mBACNC,SAAU,cAyBCE,EAbO,SAACC,GACrB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAM9B,EAA2BP,EAAaS,GAAhCP,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SAEd,OACE,sBAAKS,UAAS,yBAAoBH,GAAlC,UACE,mBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAwBT,EAAxB,eC5BZU,EAAU,SAACP,GACf,OACE,qBAAKM,UAAU,mBAAf,SACE,qBAAKA,UAAU,qBAAf,SAAqCN,EAAMQ,aAKjDD,EAAQE,aAAe,CACrBD,QAAS,aAGID,QCGTG,E,4MAWJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,uDAEnC,WAAqB,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GACCC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEnB,IAAKgB,EAASI,OAAOC,cAEvC,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAER,aAAc,6B,gCAI3C,c,2BAEA,WACE,OACE,8BACIY,KAAKb,MAAMV,KAAQuB,KAAKb,MAAMC,aAG9BY,KAAKb,MAAMC,cAAgB,cAAC,EAAD,CAAeX,IAAKuB,KAAKb,MAAMV,MAF1D,cAAC,EAAD,CAASO,QAAQ,uC,oBAQzB,WACE,OAAO,qBAAKF,UAAU,aAAf,SAA6BkB,KAAKC,sB,GAtC3BC,IAAMC,WA0CxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f2821a0f.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\r\nimport React from \"react\";\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Lets hit the beach!\",\r\n    iconName: \"sun\",\r\n  },\r\n  winter: {\r\n    text: \"Burr, its chilly\",\r\n    iconName: \"snowflake\",\r\n  },\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat < 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  const { text, iconName } = seasonConfig[season]; // destructure\r\n\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`}></i>\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`}></i>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: \"Loading..\",\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\n/* \r\n  Functional Components\r\nconst App = () => {\r\n  window.navigator.geolocation.getCurrentPosition(\r\n    (position) => console.log(position),\r\n    (err) => console.error(err)\r\n  );\r\n\r\n  return <div>latitude: {}</div>;\r\n}; \r\n*/\r\n\r\nclass App extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n\r\n  //   this.state = {\r\n  //     lat: null,\r\n  //     errorMessage: \"\",\r\n  //     currTime: new Date().toLocaleString(),\r\n  //   };\r\n  // }\r\n\r\n  state = { lat: null, errorMessage: \"\" };\r\n\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        console.log(position);\r\n        this.setState({ lat: position.coords.latitude });\r\n      },\r\n      (err) => this.setState({ errorMessage: \"Location unknown...\" })\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {}\r\n\r\n  renderContent() {\r\n    return (\r\n      <div>\r\n        {!this.state.lat && !this.state.errorMessage ? (\r\n          <Spinner message=\"Please accept location request\" />\r\n        ) : (\r\n          this.state.errorMessage || <SeasonDisplay lat={this.state.lat} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"border red\">{this.renderContent()}</div>;\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}